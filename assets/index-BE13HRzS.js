var y=Object.defineProperty;var p=(i,e,t)=>e in i?y(i,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):i[e]=t;var o=(i,e,t)=>p(i,typeof e!="symbol"?e+"":e,t);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const n of r)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&s(a)}).observe(document,{childList:!0,subtree:!0});function t(r){const n={};return r.integrity&&(n.integrity=r.integrity),r.referrerPolicy&&(n.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?n.credentials="include":r.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function s(r){if(r.ep)return;r.ep=!0;const n=t(r);fetch(r.href,n)}})();class b{constructor(e){o(this,"baudrate",9600);o(this,"buffer_size",1024*1024);o(this,"traceLog","");o(this,"lastTraceTime",Date.now());o(this,"tracing",!0);o(this,"leftOver",new Uint8Array(0));o(this,"reader");o(this,"slipReaderEnabled",!0);o(this,"trace_dom_log",!0);this.device=e,console.log("SerialTransport intialized")}_appendBuffer(e,t){const s=new Uint8Array(e.byteLength+t.byteLength);return s.set(new Uint8Array(e),0),s.set(new Uint8Array(t),e.byteLength),s.buffer}async read(e=0,t=12){let s,r=this.leftOver;if(this.leftOver=new Uint8Array(0),this.slipReaderEnabled){const n=this.slipReader(r);if(n.length>0)return n;r=this.leftOver,this.leftOver=new Uint8Array(0)}if(this.device.readable==null)return this.leftOver;this.reader=this.device.readable.getReader();try{e>0&&(s=setTimeout(()=>{this.reader&&this.reader.cancel()},e));do{if(!this.reader)throw new Error("Reader is undefined");const{value:n,done:a}=await this.reader.read();if(a&&(this.leftOver=r,console.log("Timeout")),!n)break;r=new Uint8Array(this._appendBuffer(r.buffer,n.buffer))}while(r.length<t)}finally{if(e>0&&clearTimeout(s),!this.reader)throw new Error("Reader is undefined");this.reader.releaseLock()}if(this.tracing&&(console.log("Read bytes"),this.trace(`Read ${r.length} bytes: ${this.hexConvert(r)}`)),this.slipReaderEnabled){const n=this.slipReader(r);return this.tracing&&(console.log("Slip reader results"),this.trace(`Read ${n.length} bytes: ${this.hexConvert(n)}`)),n}return r}slipReader(e){let a=[],d=!1;for(const h of e)h!==15968&&(h===219?d=!0:d?(h===220?a.push(15968):h===221&&a.push(219),d=!1):a.push(h));return new Uint8Array(a)}trace(e){const r=`${`TRACE ${(Date.now()-this.lastTraceTime).toFixed(3)}`} ${e}`;if(console.log(r),this.traceLog+=r+`
`,this.trace_dom_log){const n=document.querySelector("#traceLog");n&&(n.value+=this.traceLog,n.scrollTop=n.scrollHeight)}}hexify(e){return Array.from(e).map(t=>t.toString(16).padStart(2,"0")).join("").padEnd(16," ")}hexConvert(e,t=!0){if(t&&e.length>16){let s="",r=e;for(;r.length>0;){const n=r.slice(0,16),a=String.fromCharCode(...n).split("").map(d=>d===" "||d>=" "&&d<="~"&&d!=="  "?d:".").join("");r=r.slice(16),s+=`
    ${this.hexify(n.slice(0,8))} ${this.hexify(n.slice(8))} | ${a}`}return s}else return this.hexify(e)}debug(e,t,s=!0,r=!0,n="#console"){if(s&&console.log(e,t),r){const a=document.querySelector(`${n}`);a&&(a.value+=e+`
`,a.scrollTop=a.scrollHeight)}}async sleep(e){return new Promise(t=>setTimeout(t,e))}async connect(e=this.baudrate){try{await this.device.open({baudRate:e,bufferSize:this.buffer_size}),this.debug("Device Connected"),this.leftOver=new Uint8Array(0)}catch(t){this.debug("Error in connect",t)}}async send(e){if(this.device.writable){const t=this.device.writable.getWriter();await t.write(e),this.debug("Data sent",e,!0,!1),t.releaseLock()}}intelHexToUint8Array(e){const t=e.trim().split(`
`),s=[];return t.forEach(r=>{if(r.startsWith(":")){const n=parseInt(r.substr(1,2),16),a=9,d=a+n*2;for(let h=a;h<d;h+=2)s.push(parseInt(r.substr(h,2),16))}}),new Uint8Array(s)}async receive(e=0){if(this.leftOver.length!=0){const s=this.leftOver;return this.leftOver=new Uint8Array(0),s}if(!this.device.readable)return this.leftOver;this.reader=this.device.readable.getReader();let t;try{if(e>0&&(t=setTimeout(()=>{this.reader&&this.reader.cancel()},e)),!this.reader)throw new Error("Reader is undefined");const{value:s,done:r}=await this.reader.read();return console.log("Raw Read bytes",s),r?s||new Uint8Array(0):(this.tracing&&(console.log("Raw Read bytes"),this.trace(`Read ${s.length} bytes: ${this.hexConvert(s)}`)),s)}finally{if(e>0&&clearTimeout(t),!this.reader)throw new Error("Reader is undefined");this.reader.releaseLock()}}}var E=(i=>(i[i.BSL_ACK=0]="BSL_ACK",i[i.BSL_ERROR_HEADER_INCORRECT=81]="BSL_ERROR_HEADER_INCORRECT",i[i.BSL_ERROR_CHECKSUM_INCORRECT=82]="BSL_ERROR_CHECKSUM_INCORRECT",i[i.BSL_ERROR_PACKET_SIZE_ZERO=83]="BSL_ERROR_PACKET_SIZE_ZERO",i[i.BSL_ERROR_PACKET_SIZE_TOO_BIG=84]="BSL_ERROR_PACKET_SIZE_TOO_BIG",i[i.BSL_ERROR_UNKNOWN_ERROR=85]="BSL_ERROR_UNKNOWN_ERROR",i[i.BSL_ERROR_UNKNOWN_BAUD_RATE=86]="BSL_ERROR_UNKNOWN_BAUD_RATE",i))(E||{});class c{static softwareCRC(e,t){let s=4294967295;for(let r=0;r<t;r++){let n=e[r];s=s^n;for(let a=0;a<8;a++){const d=-(s&1);s=s>>>1^this.CRC32_POLYNOMIAL&d}}return s=s>>>0,new Uint8Array([s&255,s>>>8&255,s>>>16&255,s>>>24&255])}static async getFrameRaw(e){switch(e.type){case"Connection":{const t=this.softwareCRC(new Uint8Array([this.CONNECTION]),1);return new Uint8Array([this.HEADER,1,0,this.CONNECTION,...t])}case"StartApp":{const t=this.softwareCRC(new Uint8Array([this.START_APP]),1);return new Uint8Array([this.HEADER,1,0,this.START_APP,...t])}case"GetDeviceInfo":{const t=this.softwareCRC(new Uint8Array([this.GET_DEVICE_INFO]),1);return new Uint8Array([this.HEADER,1,0,this.GET_DEVICE_INFO,...t])}case"MassErase":{const t=this.softwareCRC(new Uint8Array([this.MASS_ERASE]),1);return new Uint8Array([this.HEADER,1,0,this.MASS_ERASE,...t])}case"ProgramData":{const t=e.data,s=[e.start_address>>24&255,e.start_address>>16&255,e.start_address>>8&255,e.start_address&255],r=t.length+4+1,n=this.softwareCRC(new Uint8Array([this.PROGRAM_DATA,...s,...t]),r);return new Uint8Array([this.HEADER,r&255,r>>8,this.PROGRAM_DATA,...s,...t,...n])}case"UnlockBootloader":{const t=e.password,s=t.length+1,r=this.softwareCRC(new Uint8Array([this.UNLOCK_BOOTLOADER,...t]),s);return new Uint8Array([this.HEADER,s&255,s>>8,this.UNLOCK_BOOTLOADER,...t,...r])}default:throw new Error("Unimplemented command")}}static getResponse(e,t){switch(t.type){case"Connection":case"StartApp":return{type:t.type,response:e[0]};case"MassErase":case"ProgramData":case"UnlockBootloader":return{type:t.type,response:e[5]};case"GetDeviceInfo":return{type:t.type,response:e[5],CMD_interpreter_version:e[this.OFFSET_BYTE+2]<<8|e[this.OFFSET_BYTE+1],build_id:e[this.OFFSET_BYTE+4]<<8|e[this.OFFSET_BYTE+3],app_version:e[this.OFFSET_BYTE+8]<<24|e[this.OFFSET_BYTE+7]<<16|e[this.OFFSET_BYTE+6]<<8|e[this.OFFSET_BYTE+5],active_plugin_interface_version:e[this.OFFSET_BYTE+10]<<8|e[this.OFFSET_BYTE+9],BSL_max_buffer_size:e[this.OFFSET_BYTE+12]<<8|e[this.OFFSET_BYTE+11],BSL_buffer_start_address:e[this.OFFSET_BYTE+16]<<24|e[this.OFFSET_BYTE+15]<<16|e[this.OFFSET_BYTE+14]<<8|e[this.OFFSET_BYTE+13],BCR_config_id:e[this.OFFSET_BYTE+20]<<24|e[this.OFFSET_BYTE+19]<<16|e[this.OFFSET_BYTE+18]<<8|e[this.OFFSET_BYTE+17],BSL_config_id:e[this.OFFSET_BYTE+24]<<24|e[this.OFFSET_BYTE+23]<<16|e[this.OFFSET_BYTE+22]<<8|e[this.OFFSET_BYTE+21]};default:throw new Error("Unimplemented command")}}}o(c,"HEADER",128),o(c,"CONNECTION",18),o(c,"UNLOCK_BOOTLOADER",33),o(c,"FLASH_RANGE_ERASE",35),o(c,"MASS_ERASE",21),o(c,"PROGRAM_DATA",32),o(c,"PROGRAM_DATA_FAST",36),o(c,"MEMORY_READ",41),o(c,"FACTORY_RESET",48),o(c,"GET_DEVICE_INFO",25),o(c,"STANDALONE_VERIFY",49),o(c,"START_APP",64),o(c,"CRC32_POLYNOMIAL",3988292384),o(c,"INITIAL_SEED",4294967295),o(c,"OFFSET_BYTE",4);class T extends b{constructor(t){super(t);o(this,"conn_established",!1);o(this,"FLASH_START_ADDRESS",0);o(this,"FLASH_MAX_BUFFER_SIZE",0);o(this,"BSL_PW_RESET",[255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255]);o(this,"MEMORY_READ_RESPONSE",48);o(this,"DEVICE_INFO_RESPONSE",49);o(this,"STANDALONE_VERIFY_RESPONSE",50);o(this,"MESSAGE_RESPONSE",59);o(this,"ERROR_RESPONSE",58);o(this,"ESP_CMD",{BSL_ENBL:["B","S","L"],OLED_CLR:["O","L","D","R","S","T"],OLED_ON:["O","L","D","O","N"],OLED_OFF:["O","L","D","O","F","F"],OLED_PRINT:["O","L","D","W","R","T"]})}s2a(t){let s=new Uint8Array(t.length);for(let r=0;r<t.length;r++)s[r]=t[r].charCodeAt(0);return s}async enableBSL(){await this.send(new Uint8Array(this.s2a(this.ESP_CMD.BSL_ENBL))),await this.receive(),this.sleep(100)}async control_esp_oled(t){await this.send(this.s2a(t)),await this.receive()}async establish_conn(){this.debug("Enabling BSL Mode..."),await this.enableBSL();let t={type:"Connection"},s=await c.getFrameRaw(t);await this.send(s);let r=await this.receive(),n=c.getResponse(r,t);if(n.response==E.BSL_ACK)this.conn_established=!0,this.debug("BSL Mode Enabled"),await this.get_device_info();else throw this.debug("BSL Mode Enable Failed",n.response),this.conn_established=!1,new Error("BSL Mode Enable Failed")}check_crc(t){const s=t[3]<<8|t[2],r=t.slice(4,3+s),n=c.softwareCRC(r,s),a=n[0]<<24|n[1]<<16|n[2]<<8|n[3],d=t[t.length-4]<<24|t[t.length-3]<<16|t[t.length-2]<<8|t[t.length-1];if(a!=d)throw this.debug("CRC Check Failed"),new Error("CRC Check Failed");return!0}async get_device_info(){this.conn_established||this.establish_conn();const t={type:"GetDeviceInfo"},s=await c.getFrameRaw(t);await this.send(s);const r=await this.receive(),n=this.slipReader(r);this.check_crc(n);let a=c.getResponse(n,t);a.response==E.BSL_ACK&&a.type=="GetDeviceInfo"?(this.FLASH_MAX_BUFFER_SIZE=a.BSL_max_buffer_size,this.FLASH_START_ADDRESS=a.BSL_buffer_start_address,this.debug(`Device Info:
        CMD_interpreter_version: 0x${a.CMD_interpreter_version.toString(16)}
        build_id: 0x${a.build_id.toString(16)}
        app_version: 0x${a.app_version.toString(16)}
        active_plugin_interface_version: 0x${a.active_plugin_interface_version.toString(16)}
        BSL_max_buffer_size: 0x${a.BSL_max_buffer_size.toString(16)}
        BSL_buffer_start_address: 0x${a.BSL_buffer_start_address.toString(16)}
        BCR_config_id: 0x${a.BCR_config_id.toString(16)}
        BSL_config_id: 0x${a.BSL_config_id.toString(16)}`),await this.unlock_bootloader()):this.debug("Device Info Failed",a.response)}async unlock_bootloader(){this.conn_established||await this.establish_conn(),this.debug("Unlocking Bootloader ...");let t={type:"UnlockBootloader",password:new Uint8Array(this.BSL_PW_RESET)},s=await c.getFrameRaw(t);await this.send(s);let r=await this.receive(),n=c.getResponse(r,t);if(n.response==E.BSL_ACK)this.debug("Bootloader Unlocked");else throw this.debug("Bootloader Unlock Failed",n.response),new Error("Bootloader Unlock Failed")}async mass_earse(){this.conn_established||await this.establish_conn(),this.debug("Mass Erasing ...");let t={type:"MassErase"},s=await c.getFrameRaw(t);await this.send(s),console.log("send is",this.hexify(s));let r=await this.receive(),n=c.getResponse(r,t);n.response==E.BSL_ACK?this.debug("Mass Erase Done"):this.debug("Mass Erase Failed",n.response)}async program_data(t){this.conn_established||await this.establish_conn();const s=this.intelHexToUint8Array(t);let r=0;console.log("adress",r);const n={type:"ProgramData",start_address:r,data:s};let a=await c.getFrameRaw(n);await this.send(a);let d=await this.receive(),h=c.getResponse(d,n);if(h.response==E.BSL_ACK)this.debug("Data Programmed");else throw this.debug("Data Program Failed",h.response),new Error("Data Program Failed")}async flash_earse_range(){this.debug("to be implemneted ")}async verifyFlash(){this.debug("to be implemneted ")}async start_app(){this.conn_established||this.establish_conn();let t={type:"StartApp"},s=await c.getFrameRaw(t);await this.send(s);let r=await this.receive(),n=c.getResponse(r,t);n.response==E.BSL_ACK?(this.conn_established=!1,this.debug("App Started")):this.debug("App Start Failed",n.response)}}let _=!1,g,l,u;const w=[{usbVendorId:12346,usbProductId:4097},{usbVendorId:45488,usbProductId:32853}];function O(i){i.addEventListener("click",()=>{if(_&&g){g.disconnect(),i.innerHTML="Connect",_=!1;return}i.innerHTML="Connecting...",navigator.serial.requestPort({filters:w}).then(async e=>{l=await new T(e),await l.connect(),i.innerHTML="Connected",_=!0}).catch(e=>{console.error(e),l.debug("Error Connecting"),g.disconnect(),i.innerHTML="Connect",_=!1})})}function L(i){i.addEventListener("click",async()=>{if(!_){l.debug("Please Connect First");return}i.innerHTML="Erasing...";try{await l.mass_earse()}catch(e){console.log(e),l.debug("Error Erasing")}i.innerHTML="Mass Erase"})}function A(i){i.addEventListener("click",async()=>{if(!_){l.debug("Please Connect First");return}if(!u){l.debug("Please upload a .Hex file first");return}i.innerHTML="Flashing...";try{await l.program_data(u),l.debug("Flashing Done")}catch{l.debug("Error Flashing")}i.innerHTML="Flash"})}function C(i){i.addEventListener("click",async()=>{if(!_){l.debug("Please Connect First");return}if(!u){l.debug("Please upload a .Hex file first");return}i.innerHTML="Verifying...";try{await l.verifyFlash()}catch(e){console.log(e),l.debug("Error Verifying")}i.innerHTML="Verify"})}function R(i){return new Promise((e,t)=>{const s=new FileReader;s.onload=()=>e(s.result),s.onerror=t,s.readAsText(i)})}function F(i){i.addEventListener("change",async e=>{u="";const t=e.target.files[0];t&&t.name.endsWith(".hex")?(u=await R(t),console.log(u)):l.debug("Please upload a valid .hex file")})}function v(i){i.addEventListener("click",async()=>{if(!_){l.debug("Please Connect First");return}i.innerHTML="Resting...",await l.start_app(),i.innerHTML="Reset"})}function B(i){i.addEventListener("click",async()=>{if(!_){l.debug("Please Connect First");return}i.innerHTML="Getting Device Info...";try{await l.establish_conn()}catch(e){console.log(e),l.debug("Error Getting Device Info")}i.innerHTML="Get Device Info"})}function D(i,e,t){i.addEventListener("dragover",s=>{s.preventDefault(),i.style.borderColor="#646cff"}),i.addEventListener("dragleave",()=>{i.style.borderColor="#ccc"}),i.addEventListener("drop",async s=>{if(s.preventDefault(),i.style.borderColor="#ccc",!s.dataTransfer)return;const r=s.dataTransfer.files;r.length>0&&(t.style.display="block",e.files=r,r&&r[0].name.endsWith(".hex")?(u=await R(r[0]),console.log(u)):l.debug("Please upload a valid .hex file"))})}document.querySelector("#app").innerHTML=`
<h1>MSPMO Flasher via UART</h1>
<h4>Supported Browsers: Chrome, Edge</h4>
<div class="container">
  <div class="left">
    <button id="connect" type="button">Connect</button>
    <input type="file" id="myfile" name="myfile" accept=".hex">
    <div id="dropZone" style="border: 2px dashed #ccc; padding: 10px; margin-top: 10px;">
      Drag and drop your file here
    </div>
    <div id="dropMessage" style="margin-top: 10px; color: green; display: none;">
      File has been uploaded successfully!
    </div><br><br>
    <input type="checkbox" id="toggleTraceLog" checked> Enable Trace Log
    <button id="getDeviceInfo" type="button">Get Device Info</button>
    <button id="erase" type="button">Mass Erase</button>
    <button id="flash" type="button">Flash</button>
    <button id="reset" type="button">Reset</button>
    <button id="verify" type="button">Verify</button>
    <textarea id="console" rows="15" cols="50" readonly></textarea>
  </div>
  <div id ="trace" class="right">
    <h4>Trace Log</h4>
    <textarea id="traceLog" rows="20" cols="50" readonly></textarea>
  </div>
</div>
`;const S=document.getElementById("toggleTraceLog"),f=document.getElementById("trace");console.log("trace",f,S);S&&f&&S.addEventListener("change",function(){f.style.display=="none"?f.style.display="inline":f.style.display="none"});O(document.querySelector("#connect"));B(document.querySelector("#getDeviceInfo"));L(document.querySelector("#erase"));A(document.querySelector("#flash"));F(document.querySelector("#myfile"));v(document.querySelector("#reset"));C(document.querySelector("#verify"));D(document.querySelector("#dropZone"),document.querySelector("#myfile"),document.querySelector("#dropMessage"));
